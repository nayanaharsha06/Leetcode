/**
 * Definition of Interval:
 * public class Interval {
 *     public int start, end;
 *     public Interval(int start, int end) {
 *         this.start = start;
 *         this.end = end;
 *     }
 * }
 */

class Solution {
    public int minMeetingRooms(List<Interval> intervals) {
        if (intervals == null || intervals.size() == 0) {
            return 0;
        }

        // Sort the meetings in increasing order of their start time.
        Collections.sort(intervals, (a, b) -> a.start - b.start);

        // Initialize a priority queue to store the end times of the meetings.
        PriorityQueue<Integer> endTimes = new PriorityQueue<>();
        endTimes.add(intervals.get(0).end);

        for (int i = 1; i < intervals.size(); i++) {
            // If the current meeting starts after the earliest end time, replace the earliest end time with the current meeting's end time.
            if (intervals.get(i).start >= endTimes.peek()) {
                endTimes.poll();
            }
            // Add the current meeting's end time to the priority queue.
            endTimes.add(intervals.get(i).end);
        }

        // The size of the priority queue is the minimum number of rooms required.
        return endTimes.size();
    }
}
